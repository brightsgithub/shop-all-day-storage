to install docker-compose on my ec2 instance i ran the commands below:
==========================
sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose version

mount the drive
================
see this: https://www.youtube.com/watch?v=gRgdnHHuvoI

When you stop the EC2 instance, the IP address will change.
This also means you have to remount the volume so it can be seen again:

List all drives  - lsblk

[ec2-user@ip-172-31-30-71 data]$ lsblk
NAME      MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS
xvda      202:0    0   8G  0 disk
├─xvda1   202:1    0   8G  0 part /
├─xvda127 259:0    0   1M  0 part
└─xvda128 259:1    0  10M  0 part /boot/efi
xvdf      202:80   0   1G  0 disk

then mount and list again:
[ec2-user@ip-172-31-30-71 /]$ sudo mount /dev/xvdf /data
[ec2-user@ip-172-31-30-71 /]$ lsblk
NAME      MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS
xvda      202:0    0   8G  0 disk
├─xvda1   202:1    0   8G  0 part /
├─xvda127 259:0    0   1M  0 part
└─xvda128 259:1    0  10M  0 part /boot/efi
xvdf      202:80   0   1G  0 disk /data

Now I can see my project folder and things that have been pushed here


Install java
===============
Since you are using Amazon Linux on an x86_64 architecture, you should download the "Linux x64 Compressed Archive" version of Java. Here are the steps to download and install it:
Download the Java 17 compressed archive for Linux x64:
wget https://download.oracle.com/java/17/archive/jdk-17.0.10_linux-x64_bin.tar.gz

Extract the downloaded archive:
tar -xvf jdk-17.0.10_linux-x64_bin.tar.gz

Move the extracted directory to a location of your choice. For example, you can move it to /usr/local/
sudo mkdir -p /usr/local/java
sudo mv jdk-17.0.10 /usr/local/java/

Set the JAVA_HOME environment variable:
echo 'export JAVA_HOME=/usr/local/java/jdk-17.0.10' >> ~/.bashrc
source ~/.bashrc

echo 'export PATH="$JAVA_HOME/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc

java -version
java version "17.0.10" 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 17.0.10+11-LTS-240)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.10+11-LTS-240, mixed mode, sharing)

ssh into ec2 instance
==============================
sudo ssh -i shopallday-storage-aws.pem ec2-user@13.40.33.68

copy project over
==============================
scp -i shopallday-storage-aws.pem -r SHOP_ALL_DAY_PROJECT ec2-user@13.40.33.68:/data

scp -i shopallday-storage-aws.pem -r SHOP_ALL_DAY_PROJECT/storage/storage-app.tar ec2-user@13.40.6.197:/data
scp -i shopallday-storage-aws.pem -r SHOP_ALL_DAY_PROJECT/storage/postgres.tar ec2-user@13.40.6.197:/data

docker load -i /data/ec2-user@13.40.33.68/postgres.tar

start stop commands

List all containers (including stopped ones):
------------------------------------------
docker ps -a


Stop docker containers
------------------------------------------
sudo docker stop <container id>



Remove containers
------------------------------------------
sudo docker rm <container id>


List docker images
------------------------------------------
sudo docker images


Remove docker images
------------------------------------------
docker rmi <image_id_or_name> <image_id_or_name>

===========================================================================
Better deployment process
Best Practices for Building and Deploying Docker Images

Build Locally and Push to a Registry: (not yet pushing to a registry but Im building the image locally)
either way, This approach keeps your EC2 instance lightweight and focused on running containers rather than building
them.

The process is simple

1. build the image directly:
docker build -t storage-app:latest -f storage-app/Dockerfile storage-app

2. Save the Docker Images to a File:
docker save -o storage-app.tar storage-app:latest
docker save -o postgres.tar postgres

3. Transfer the Docker Images to the EC2 Instance

4. once on the EC2 instance, Load the Docker Images
docker load -i /home/ec2-user/storage-app.tar
docker load -i /home/ec2-user/postgres.tar

5. Edit the docker-compose.yml file to NOT build but instead use an image

6. docker-compose up -d to start the container

HOWEVER! when I do the above, I get the following error:
----------------------------------
Start...                       0.9s
 ! db The requested image's platform (linux/arm64) does not match the detected host platform (linux/amd64/v3)
 and no specific platform was requested                                            0.0s
 ✔ Container data-storage_app-1                                                                                                                                  Started                        1.4s
 ! storage_app The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64/v3)
  and no specific platform was requested                                0.0s
----------------------------------
Explanation
----------------------------------
this is due to a mismatch between the architecture of the Docker images you have built (linux/arm64) and the
architecture of your EC2 instance (linux/amd64). This usually happens if you are developing on an ARM-based machine
(like an Apple M1/M2 Mac) and deploying to an x86-based EC2 instance.

Solution
----------------------------------
To resolve this, you need to ensure that the Docker images you build are compatible with the target architecture (amd64).
You can do this by using Docker's buildx tool to create multi-architecture images. Here’s how you can do it:

1. Install buildx (if not already installed)
Docker buildx is usually included with Docker Desktop, but you might need to enable it:

    docker buildx create --use
    docker buildx inspect --bootstrap

2. Build the Images for amd64 Architecture:

    # Build the storage_app image for amd64
    docker buildx build --platform linux/amd64 -t storage-app:latest -f Dockerfile --load .

    # Save the storage_app image to a tar file
    docker save -o storage_app_amd64.tar storage-app:latest

    # Build the postgres image for amd64
    docker buildx build --platform linux/amd64 -t postgres:latest --load .

    # Save the postgres image to a tar file
    docker save -o postgres_amd64.tar postgres:latest

    note, The --load flag ensures the image is loaded into the local Docker daemon after the build, which allows you to
    use docker save to create the tar files.

3. Transfer the Tar Files to the EC2 Instance:
    scp -i shopallday-storage-aws.pem -r SHOP_ALL_DAY_PROJECT/storage/storage-app/storage_app_amd64.tar ec2-user@13.40.6.197:/data
    scp -i shopallday-storage-aws.pem -r SHOP_ALL_DAY_PROJECT/storage/storage-app/postgres_amd64.tar ec2-user@13.40.6.197:/data

4. Load the Images on the EC2 Instance:

    First: sudo docker-compose down
    List all images: sudo docker images
    Remove old images: sudo docker rmi  <image_id_or_name> <image_id_or_name>

    Perform the below from the directory where the images have been copied to. In my case the /data folder

    # Load the storage_app image
    sudo docker load -i storage_app_amd64.tar

    # Load the postgres image
    sudo docker load -i postgres_amd64.tar

5. Update docker-compose.yml on the EC2 Instance:

    Make sure your docker-compose.yml file on the EC2 instance is configured to use the locally loaded images:
    remove "build" step for storage_app and replace with "image: storage-app:latest"

6. Run docker-compose on the EC2 Instance:
    docker-compose up -d













